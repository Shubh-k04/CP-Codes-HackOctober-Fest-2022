from sys import stdin

# Following is the Node class already written for the Linked List.
class Node:
    def __init__(self, data) :
        self.data = data
        self.next = None
def length(head):       #Will return the length of linked list
    count = 0
    while head is not None:
        head = head.next
        count+=1
    return count

def deleteNode(head, pos) :
         
        # Store head node
        temp = head
 
        # If head node itself holds the key to be deleted
        if (temp is not None):
            if (temp.data == pos):
                head = temp.next
                temp = None
                return head
 
        # Search for the key to be deleted, keep track of the
        # previous node as we need to change 'prev.next'
        while(temp is not None):
            if temp.data == pos:
                break
            prev = temp
            temp = temp.next
 
        # if key was not present in linked list
        if(temp == None):
            return head
 
        # Unlink the node from linked list
        prev.next = temp.next
 
        temp = None
        return head
    

























# Taking Input Using Fast I/O.
def takeInput() :
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1) :
        data = datas[i]
        newNode = Node(data)

        if head is None :
            head = newNode
            tail = newNode

        else :
            tail.next = newNode
            tail = newNode

        i += 1

    return head



# To print the linked list.
def printLinkedList(head) :

    while head is not None :
        print(head.data, end = " ")
        head = head.next

    print()


# Main.
t = int(stdin.readline().strip())

while t > 0 :
    
    head = takeInput()
    pos = int(stdin.readline().rstrip())
    
    head = deleteNode(head, pos)
    printLinkedList(head)

    t -= 1
